// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_data_0_address0,
        ctx_data_0_ce0,
        ctx_data_0_we0,
        ctx_data_0_d0,
        ctx_data_0_q0,
        ctx_data_0_address1,
        ctx_data_0_ce1,
        ctx_data_0_q1,
        ctx_data_1_address0,
        ctx_data_1_ce0,
        ctx_data_1_we0,
        ctx_data_1_d0,
        ctx_data_1_q0,
        ctx_data_1_address1,
        ctx_data_1_ce1,
        ctx_data_1_q1,
        ctx_data_2_address0,
        ctx_data_2_ce0,
        ctx_data_2_we0,
        ctx_data_2_d0,
        ctx_data_2_q0,
        ctx_data_2_address1,
        ctx_data_2_ce1,
        ctx_data_2_q1,
        ctx_data_3_address0,
        ctx_data_3_ce0,
        ctx_data_3_we0,
        ctx_data_3_d0,
        ctx_data_3_q0,
        ctx_data_3_address1,
        ctx_data_3_ce1,
        ctx_data_3_q1,
        ctx_datalen_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        data_address0,
        data_ce0,
        data_q0,
        len,
        dp_key_r,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_ST_fsm_state1 = 141'd1;
parameter    ap_ST_fsm_state2 = 141'd2;
parameter    ap_ST_fsm_state3 = 141'd4;
parameter    ap_ST_fsm_state4 = 141'd8;
parameter    ap_ST_fsm_state5 = 141'd16;
parameter    ap_ST_fsm_state6 = 141'd32;
parameter    ap_ST_fsm_state7 = 141'd64;
parameter    ap_ST_fsm_state8 = 141'd128;
parameter    ap_ST_fsm_state9 = 141'd256;
parameter    ap_ST_fsm_state10 = 141'd512;
parameter    ap_ST_fsm_state11 = 141'd1024;
parameter    ap_ST_fsm_state12 = 141'd2048;
parameter    ap_ST_fsm_state13 = 141'd4096;
parameter    ap_ST_fsm_state14 = 141'd8192;
parameter    ap_ST_fsm_state15 = 141'd16384;
parameter    ap_ST_fsm_state16 = 141'd32768;
parameter    ap_ST_fsm_state17 = 141'd65536;
parameter    ap_ST_fsm_state18 = 141'd131072;
parameter    ap_ST_fsm_state19 = 141'd262144;
parameter    ap_ST_fsm_state20 = 141'd524288;
parameter    ap_ST_fsm_state21 = 141'd1048576;
parameter    ap_ST_fsm_state22 = 141'd2097152;
parameter    ap_ST_fsm_state23 = 141'd4194304;
parameter    ap_ST_fsm_state24 = 141'd8388608;
parameter    ap_ST_fsm_state25 = 141'd16777216;
parameter    ap_ST_fsm_state26 = 141'd33554432;
parameter    ap_ST_fsm_state27 = 141'd67108864;
parameter    ap_ST_fsm_state28 = 141'd134217728;
parameter    ap_ST_fsm_state29 = 141'd268435456;
parameter    ap_ST_fsm_state30 = 141'd536870912;
parameter    ap_ST_fsm_state31 = 141'd1073741824;
parameter    ap_ST_fsm_state32 = 141'd2147483648;
parameter    ap_ST_fsm_state33 = 141'd4294967296;
parameter    ap_ST_fsm_state34 = 141'd8589934592;
parameter    ap_ST_fsm_state35 = 141'd17179869184;
parameter    ap_ST_fsm_state36 = 141'd34359738368;
parameter    ap_ST_fsm_state37 = 141'd68719476736;
parameter    ap_ST_fsm_state38 = 141'd137438953472;
parameter    ap_ST_fsm_state39 = 141'd274877906944;
parameter    ap_ST_fsm_state40 = 141'd549755813888;
parameter    ap_ST_fsm_state41 = 141'd1099511627776;
parameter    ap_ST_fsm_state42 = 141'd2199023255552;
parameter    ap_ST_fsm_state43 = 141'd4398046511104;
parameter    ap_ST_fsm_state44 = 141'd8796093022208;
parameter    ap_ST_fsm_state45 = 141'd17592186044416;
parameter    ap_ST_fsm_state46 = 141'd35184372088832;
parameter    ap_ST_fsm_state47 = 141'd70368744177664;
parameter    ap_ST_fsm_state48 = 141'd140737488355328;
parameter    ap_ST_fsm_state49 = 141'd281474976710656;
parameter    ap_ST_fsm_state50 = 141'd562949953421312;
parameter    ap_ST_fsm_state51 = 141'd1125899906842624;
parameter    ap_ST_fsm_state52 = 141'd2251799813685248;
parameter    ap_ST_fsm_state53 = 141'd4503599627370496;
parameter    ap_ST_fsm_state54 = 141'd9007199254740992;
parameter    ap_ST_fsm_state55 = 141'd18014398509481984;
parameter    ap_ST_fsm_state56 = 141'd36028797018963968;
parameter    ap_ST_fsm_state57 = 141'd72057594037927936;
parameter    ap_ST_fsm_state58 = 141'd144115188075855872;
parameter    ap_ST_fsm_state59 = 141'd288230376151711744;
parameter    ap_ST_fsm_state60 = 141'd576460752303423488;
parameter    ap_ST_fsm_state61 = 141'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 141'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 141'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 141'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 141'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 141'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 141'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 141'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 141'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 141'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 141'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 141'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 141'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 141'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 141'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 141'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 141'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 141'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 141'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 141'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 141'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 141'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 141'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 141'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 141'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 141'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 141'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 141'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 141'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 141'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 141'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 141'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 141'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 141'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 141'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 141'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 141'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 141'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 141'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 141'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 141'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 141'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 141'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 141'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 141'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 141'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 141'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 141'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 141'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 141'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 141'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 141'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 141'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 141'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 141'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 141'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 141'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 141'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 141'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 141'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 141'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 141'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 141'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 141'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 141'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 141'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 141'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 141'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 141'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 141'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 141'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 141'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 141'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 141'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 141'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 141'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 141'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 141'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 141'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 141'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 141'd1393796574908163946345982392040522594123776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] ctx_data_0_address0;
output   ctx_data_0_ce0;
output   ctx_data_0_we0;
output  [7:0] ctx_data_0_d0;
input  [7:0] ctx_data_0_q0;
output  [3:0] ctx_data_0_address1;
output   ctx_data_0_ce1;
input  [7:0] ctx_data_0_q1;
output  [3:0] ctx_data_1_address0;
output   ctx_data_1_ce0;
output   ctx_data_1_we0;
output  [7:0] ctx_data_1_d0;
input  [7:0] ctx_data_1_q0;
output  [3:0] ctx_data_1_address1;
output   ctx_data_1_ce1;
input  [7:0] ctx_data_1_q1;
output  [3:0] ctx_data_2_address0;
output   ctx_data_2_ce0;
output   ctx_data_2_we0;
output  [7:0] ctx_data_2_d0;
input  [7:0] ctx_data_2_q0;
output  [3:0] ctx_data_2_address1;
output   ctx_data_2_ce1;
input  [7:0] ctx_data_2_q1;
output  [3:0] ctx_data_3_address0;
output   ctx_data_3_ce0;
output   ctx_data_3_we0;
output  [7:0] ctx_data_3_d0;
input  [7:0] ctx_data_3_q0;
output  [3:0] ctx_data_3_address1;
output   ctx_data_3_ce1;
input  [7:0] ctx_data_3_q1;
input  [31:0] ctx_datalen_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
output  [5:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
input  [31:0] len;
input  [31:0] dp_key_r;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ctx_data_0_address0;
reg ctx_data_0_ce0;
reg ctx_data_0_we0;
reg ctx_data_0_ce1;
reg[3:0] ctx_data_1_address0;
reg ctx_data_1_ce0;
reg ctx_data_1_we0;
reg ctx_data_1_ce1;
reg[3:0] ctx_data_2_address0;
reg ctx_data_2_ce0;
reg ctx_data_2_we0;
reg ctx_data_2_ce1;
reg[3:0] ctx_data_3_address0;
reg ctx_data_3_ce0;
reg ctx_data_3_we0;
reg ctx_data_3_ce1;
reg data_ce0;

(* fsm_encoding = "none" *) reg   [140:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] empty_fu_305_p1;
reg   [6:0] empty_reg_600;
wire   [6:0] i_fu_359_p2;
reg   [6:0] i_reg_608;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln174_fu_354_p2;
wire   [0:0] icmp_ln178_fu_455_p2;
reg   [0:0] icmp_ln178_reg_621;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
reg   [31:0] ctx_state_0_ret_reg_635;
wire    ap_CS_fsm_state140;
reg   [31:0] ctx_state_1_ret_reg_640;
reg   [31:0] ctx_state_2_ret_reg_645;
reg   [31:0] ctx_state_3_ret_reg_650;
reg   [31:0] ctx_state_4_ret_reg_655;
reg   [31:0] ctx_state_5_ret_reg_660;
reg   [31:0] ctx_state_6_ret_reg_665;
reg   [31:0] ctx_state_7_ret_reg_670;
wire    grp_sha256_transform_fu_248_ap_start;
wire    grp_sha256_transform_fu_248_ap_done;
wire    grp_sha256_transform_fu_248_ap_idle;
wire    grp_sha256_transform_fu_248_ap_ready;
wire   [3:0] grp_sha256_transform_fu_248_data_0_address0;
wire    grp_sha256_transform_fu_248_data_0_ce0;
wire   [3:0] grp_sha256_transform_fu_248_data_0_address1;
wire    grp_sha256_transform_fu_248_data_0_ce1;
wire   [3:0] grp_sha256_transform_fu_248_data_1_address0;
wire    grp_sha256_transform_fu_248_data_1_ce0;
wire   [3:0] grp_sha256_transform_fu_248_data_1_address1;
wire    grp_sha256_transform_fu_248_data_1_ce1;
wire   [3:0] grp_sha256_transform_fu_248_data_2_address0;
wire    grp_sha256_transform_fu_248_data_2_ce0;
wire   [3:0] grp_sha256_transform_fu_248_data_2_address1;
wire    grp_sha256_transform_fu_248_data_2_ce1;
wire   [3:0] grp_sha256_transform_fu_248_data_3_address0;
wire    grp_sha256_transform_fu_248_data_3_ce0;
wire   [3:0] grp_sha256_transform_fu_248_data_3_address1;
wire    grp_sha256_transform_fu_248_data_3_ce1;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_0;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_1;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_2;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_3;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_4;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_5;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_6;
wire   [31:0] grp_sha256_transform_fu_248_ap_return_7;
reg   [6:0] i_0_reg_237;
wire    ap_CS_fsm_state141;
reg    grp_sha256_transform_fu_248_ap_start_reg;
wire    ap_CS_fsm_state8;
reg   [140:0] ap_NS_fsm;
wire    ap_NS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln176_fu_365_p1;
wire   [63:0] zext_ln176_1_fu_438_p1;
reg   [31:0] ctx_datalen_0_fu_72;
wire   [31:0] add_ln177_fu_449_p2;
reg   [31:0] ctx_state_7_0_fu_76;
reg   [31:0] ctx_state_6_0_fu_80;
reg   [31:0] ctx_state_5_0_fu_84;
reg   [31:0] ctx_state_4_0_fu_88;
reg   [31:0] ctx_state_3_0_fu_92;
reg   [31:0] ctx_state_2_0_fu_96;
reg   [31:0] ctx_state_1_0_fu_100;
reg   [31:0] ctx_state_0_0_fu_104;
wire   [1:0] trunc_ln176_fu_424_p1;
wire   [29:0] lshr_ln_fu_428_p4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 141'd1;
#0 grp_sha256_transform_fu_248_ap_start_reg = 1'b0;
end

sha256_transform grp_sha256_transform_fu_248(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_248_ap_start),
    .ap_done(grp_sha256_transform_fu_248_ap_done),
    .ap_idle(grp_sha256_transform_fu_248_ap_idle),
    .ap_ready(grp_sha256_transform_fu_248_ap_ready),
    .ap_ce(1'b1),
    .ctx_state_0_read(ctx_state_0_0_fu_104),
    .ctx_state_1_read(ctx_state_1_0_fu_100),
    .ctx_state_2_read(ctx_state_2_0_fu_96),
    .ctx_state_3_read(ctx_state_3_0_fu_92),
    .ctx_state_4_read(ctx_state_4_0_fu_88),
    .ctx_state_5_read(ctx_state_5_0_fu_84),
    .ctx_state_6_read(ctx_state_6_0_fu_80),
    .ctx_state_7_read(ctx_state_7_0_fu_76),
    .data_0_address0(grp_sha256_transform_fu_248_data_0_address0),
    .data_0_ce0(grp_sha256_transform_fu_248_data_0_ce0),
    .data_0_q0(ctx_data_0_q0),
    .data_0_address1(grp_sha256_transform_fu_248_data_0_address1),
    .data_0_ce1(grp_sha256_transform_fu_248_data_0_ce1),
    .data_0_q1(ctx_data_0_q1),
    .data_1_address0(grp_sha256_transform_fu_248_data_1_address0),
    .data_1_ce0(grp_sha256_transform_fu_248_data_1_ce0),
    .data_1_q0(ctx_data_1_q0),
    .data_1_address1(grp_sha256_transform_fu_248_data_1_address1),
    .data_1_ce1(grp_sha256_transform_fu_248_data_1_ce1),
    .data_1_q1(ctx_data_1_q1),
    .data_2_address0(grp_sha256_transform_fu_248_data_2_address0),
    .data_2_ce0(grp_sha256_transform_fu_248_data_2_ce0),
    .data_2_q0(ctx_data_2_q0),
    .data_2_address1(grp_sha256_transform_fu_248_data_2_address1),
    .data_2_ce1(grp_sha256_transform_fu_248_data_2_ce1),
    .data_2_q1(ctx_data_2_q1),
    .data_3_address0(grp_sha256_transform_fu_248_data_3_address0),
    .data_3_ce0(grp_sha256_transform_fu_248_data_3_ce0),
    .data_3_q0(ctx_data_3_q0),
    .data_3_address1(grp_sha256_transform_fu_248_data_3_address1),
    .data_3_ce1(grp_sha256_transform_fu_248_data_3_ce1),
    .data_3_q1(ctx_data_3_q1),
    .dp_key_r(dp_key_r),
    .ap_return_0(grp_sha256_transform_fu_248_ap_return_0),
    .ap_return_1(grp_sha256_transform_fu_248_ap_return_1),
    .ap_return_2(grp_sha256_transform_fu_248_ap_return_2),
    .ap_return_3(grp_sha256_transform_fu_248_ap_return_3),
    .ap_return_4(grp_sha256_transform_fu_248_ap_return_4),
    .ap_return_5(grp_sha256_transform_fu_248_ap_return_5),
    .ap_return_6(grp_sha256_transform_fu_248_ap_return_6),
    .ap_return_7(grp_sha256_transform_fu_248_ap_return_7)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_248_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state9) & (1'b1 == ap_CS_fsm_state8))) begin
            grp_sha256_transform_fu_248_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_248_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_248_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_datalen_0_fu_72 <= 32'd0;
    end else if (((icmp_ln178_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_datalen_0_fu_72 <= add_ln177_fu_449_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_datalen_0_fu_72 <= ctx_datalen_read;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_0_0_fu_104 <= ctx_state_0_ret_reg_635;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_0_0_fu_104 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_1_0_fu_100 <= ctx_state_1_ret_reg_640;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_1_0_fu_100 <= p_read2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_2_0_fu_96 <= ctx_state_2_ret_reg_645;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_2_0_fu_96 <= p_read3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_3_0_fu_92 <= ctx_state_3_ret_reg_650;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_3_0_fu_92 <= p_read4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_4_0_fu_88 <= ctx_state_4_ret_reg_655;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_4_0_fu_88 <= p_read5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_5_0_fu_84 <= ctx_state_5_ret_reg_660;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_5_0_fu_84 <= p_read6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_6_0_fu_80 <= ctx_state_6_ret_reg_665;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_6_0_fu_80 <= p_read7;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_621 == 1'd1) & (1'b1 == ap_CS_fsm_state141))) begin
        ctx_state_7_0_fu_76 <= ctx_state_7_ret_reg_670;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_state_7_0_fu_76 <= p_read8;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        i_0_reg_237 <= i_reg_608;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_237 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        ctx_state_0_ret_reg_635 <= grp_sha256_transform_fu_248_ap_return_0;
        ctx_state_1_ret_reg_640 <= grp_sha256_transform_fu_248_ap_return_1;
        ctx_state_2_ret_reg_645 <= grp_sha256_transform_fu_248_ap_return_2;
        ctx_state_3_ret_reg_650 <= grp_sha256_transform_fu_248_ap_return_3;
        ctx_state_4_ret_reg_655 <= grp_sha256_transform_fu_248_ap_return_4;
        ctx_state_5_ret_reg_660 <= grp_sha256_transform_fu_248_ap_return_5;
        ctx_state_6_ret_reg_665 <= grp_sha256_transform_fu_248_ap_return_6;
        ctx_state_7_ret_reg_670 <= grp_sha256_transform_fu_248_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_600 <= empty_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_608 <= i_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln178_reg_621 <= icmp_ln178_fu_455_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln174_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln174_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_0_address0 = zext_ln176_1_fu_438_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_0_address0 = grp_sha256_transform_fu_248_data_0_address0;
    end else begin
        ctx_data_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_0_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_0_ce0 = grp_sha256_transform_fu_248_data_0_ce0;
    end else begin
        ctx_data_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_0_ce1 = grp_sha256_transform_fu_248_data_0_ce1;
    end else begin
        ctx_data_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln176_fu_424_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_0_we0 = 1'b1;
    end else begin
        ctx_data_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_1_address0 = zext_ln176_1_fu_438_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_1_address0 = grp_sha256_transform_fu_248_data_1_address0;
    end else begin
        ctx_data_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_1_ce0 = grp_sha256_transform_fu_248_data_1_ce0;
    end else begin
        ctx_data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_1_ce1 = grp_sha256_transform_fu_248_data_1_ce1;
    end else begin
        ctx_data_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln176_fu_424_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_1_we0 = 1'b1;
    end else begin
        ctx_data_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_2_address0 = zext_ln176_1_fu_438_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_2_address0 = grp_sha256_transform_fu_248_data_2_address0;
    end else begin
        ctx_data_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_2_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_2_ce0 = grp_sha256_transform_fu_248_data_2_ce0;
    end else begin
        ctx_data_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_2_ce1 = grp_sha256_transform_fu_248_data_2_ce1;
    end else begin
        ctx_data_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln176_fu_424_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_2_we0 = 1'b1;
    end else begin
        ctx_data_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_3_address0 = zext_ln176_1_fu_438_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_3_address0 = grp_sha256_transform_fu_248_data_3_address0;
    end else begin
        ctx_data_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_data_3_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_3_ce0 = grp_sha256_transform_fu_248_data_3_ce0;
    end else begin
        ctx_data_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        ctx_data_3_ce1 = grp_sha256_transform_fu_248_data_3_ce1;
    end else begin
        ctx_data_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln176_fu_424_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_data_3_we0 = 1'b1;
    end else begin
        ctx_data_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln174_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln178_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_fu_449_p2 = (ctx_datalen_0_fu_72 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state9 = ap_NS_fsm[32'd8];

assign ap_return_0 = ctx_datalen_0_fu_72;

assign ap_return_1 = ctx_state_0_0_fu_104;

assign ap_return_2 = ctx_state_1_0_fu_100;

assign ap_return_3 = ctx_state_2_0_fu_96;

assign ap_return_4 = ctx_state_3_0_fu_92;

assign ap_return_5 = ctx_state_4_0_fu_88;

assign ap_return_6 = ctx_state_5_0_fu_84;

assign ap_return_7 = ctx_state_6_0_fu_80;

assign ap_return_8 = ctx_state_7_0_fu_76;

assign ctx_data_0_address1 = grp_sha256_transform_fu_248_data_0_address1;

assign ctx_data_0_d0 = data_q0;

assign ctx_data_1_address1 = grp_sha256_transform_fu_248_data_1_address1;

assign ctx_data_1_d0 = data_q0;

assign ctx_data_2_address1 = grp_sha256_transform_fu_248_data_2_address1;

assign ctx_data_2_d0 = data_q0;

assign ctx_data_3_address1 = grp_sha256_transform_fu_248_data_3_address1;

assign ctx_data_3_d0 = data_q0;

assign data_address0 = zext_ln176_fu_365_p1;

assign empty_fu_305_p1 = len[6:0];

assign grp_sha256_transform_fu_248_ap_start = grp_sha256_transform_fu_248_ap_start_reg;

assign i_fu_359_p2 = (i_0_reg_237 + 7'd1);

assign icmp_ln174_fu_354_p2 = ((i_0_reg_237 == empty_reg_600) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_455_p2 = ((add_ln177_fu_449_p2 == 32'd64) ? 1'b1 : 1'b0);

assign lshr_ln_fu_428_p4 = {{ctx_datalen_0_fu_72[31:2]}};

assign trunc_ln176_fu_424_p1 = ctx_datalen_0_fu_72[1:0];

assign zext_ln176_1_fu_438_p1 = lshr_ln_fu_428_p4;

assign zext_ln176_fu_365_p1 = i_0_reg_237;

endmodule //sha256_update
