// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SIG0_HH_
#define _SIG0_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct SIG0 : public sc_module {
    // Port declarations 4
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > x;
    sc_in< sc_lv<32> > rtl_key_r;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    SIG0(sc_module_name name);
    SC_HAS_PROCESS(SIG0);

    ~SIG0();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<32> > xor_ln205_1_fu_223_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_p_0_phi_fu_73_p4;
    sc_signal< sc_lv<1> > tmp_fu_83_p3;
    sc_signal< sc_lv<32> > xor_ln210_fu_334_p2;
    sc_signal< sc_lv<25> > trunc_ln56_5_fu_99_p1;
    sc_signal< sc_lv<7> > lshr_ln_fu_103_p4;
    sc_signal< sc_lv<7> > trunc_ln60_5_fu_131_p1;
    sc_signal< sc_lv<25> > lshr_ln7_fu_121_p4;
    sc_signal< sc_lv<1> > tmp_4_fu_91_p3;
    sc_signal< sc_lv<32> > or_ln2_fu_135_p3;
    sc_signal< sc_lv<32> > or_ln_fu_113_p3;
    sc_signal< sc_lv<14> > trunc_ln56_6_fu_151_p1;
    sc_signal< sc_lv<18> > lshr_ln56_4_fu_155_p4;
    sc_signal< sc_lv<18> > trunc_ln60_6_fu_183_p1;
    sc_signal< sc_lv<14> > lshr_ln60_4_fu_173_p4;
    sc_signal< sc_lv<32> > or_ln60_4_fu_187_p3;
    sc_signal< sc_lv<32> > or_ln56_4_fu_165_p3;
    sc_signal< sc_lv<29> > lshr_ln8_fu_203_p4;
    sc_signal< sc_lv<32> > zext_ln205_fu_213_p1;
    sc_signal< sc_lv<32> > select_ln54_4_fu_195_p3;
    sc_signal< sc_lv<32> > xor_ln205_fu_217_p2;
    sc_signal< sc_lv<32> > select_ln54_fu_143_p3;
    sc_signal< sc_lv<26> > trunc_ln56_fu_230_p1;
    sc_signal< sc_lv<6> > lshr_ln56_5_fu_234_p4;
    sc_signal< sc_lv<6> > trunc_ln60_fu_262_p1;
    sc_signal< sc_lv<26> > lshr_ln60_5_fu_252_p4;
    sc_signal< sc_lv<32> > or_ln60_5_fu_266_p3;
    sc_signal< sc_lv<32> > or_ln56_5_fu_244_p3;
    sc_signal< sc_lv<24> > trunc_ln56_4_fu_282_p1;
    sc_signal< sc_lv<8> > lshr_ln56_6_fu_286_p4;
    sc_signal< sc_lv<8> > trunc_ln60_4_fu_314_p1;
    sc_signal< sc_lv<24> > lshr_ln60_6_fu_304_p4;
    sc_signal< sc_lv<32> > or_ln60_6_fu_318_p3;
    sc_signal< sc_lv<32> > or_ln56_6_fu_296_p3;
    sc_signal< sc_lv<32> > select_ln54_6_fu_326_p3;
    sc_signal< sc_lv<32> > select_ln54_5_fu_274_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_phi_mux_p_0_phi_fu_73_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_lshr_ln56_4_fu_155_p4();
    void thread_lshr_ln56_5_fu_234_p4();
    void thread_lshr_ln56_6_fu_286_p4();
    void thread_lshr_ln60_4_fu_173_p4();
    void thread_lshr_ln60_5_fu_252_p4();
    void thread_lshr_ln60_6_fu_304_p4();
    void thread_lshr_ln7_fu_121_p4();
    void thread_lshr_ln8_fu_203_p4();
    void thread_lshr_ln_fu_103_p4();
    void thread_or_ln2_fu_135_p3();
    void thread_or_ln56_4_fu_165_p3();
    void thread_or_ln56_5_fu_244_p3();
    void thread_or_ln56_6_fu_296_p3();
    void thread_or_ln60_4_fu_187_p3();
    void thread_or_ln60_5_fu_266_p3();
    void thread_or_ln60_6_fu_318_p3();
    void thread_or_ln_fu_113_p3();
    void thread_select_ln54_4_fu_195_p3();
    void thread_select_ln54_5_fu_274_p3();
    void thread_select_ln54_6_fu_326_p3();
    void thread_select_ln54_fu_143_p3();
    void thread_tmp_4_fu_91_p3();
    void thread_tmp_fu_83_p3();
    void thread_trunc_ln56_4_fu_282_p1();
    void thread_trunc_ln56_5_fu_99_p1();
    void thread_trunc_ln56_6_fu_151_p1();
    void thread_trunc_ln56_fu_230_p1();
    void thread_trunc_ln60_4_fu_314_p1();
    void thread_trunc_ln60_5_fu_131_p1();
    void thread_trunc_ln60_6_fu_183_p1();
    void thread_trunc_ln60_fu_262_p1();
    void thread_xor_ln205_1_fu_223_p2();
    void thread_xor_ln205_fu_217_p2();
    void thread_xor_ln210_fu_334_p2();
    void thread_zext_ln205_fu_213_p1();
};

}

using namespace ap_rtl;

#endif
